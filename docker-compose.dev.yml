services:
  # PostgreSQL Database (same as production)
  postgres:
    image: postgres:15-alpine
    container_name: brands_postgres_dev
    restart: unless-stopped
    env_file:
      - env.dev
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    networks:
      - ${DOCKER_NETWORK_NAME}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # FastAPI Backend (development with hot reload)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: brands_backend_dev
    restart: unless-stopped
    env_file:
      - env.dev
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - API_KEY=${BACKEND_API_KEY}
      - ENVIRONMENT=${BACKEND_ENVIRONMENT}
      - PORT=${BACKEND_PORT}
      - HOST=${BACKEND_HOST}
    ports:
      - "${BACKEND_EXTERNAL_PORT}:${BACKEND_PORT}"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ${DOCKER_NETWORK_NAME}
    volumes:
      - ./backend:/app
      - /app/__pycache__
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${BACKEND_PORT}/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Next.js Frontend (development with hot reload)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: brands_frontend_dev
    restart: unless-stopped
    env_file:
      - env.dev
    environment:
      - NEXT_PUBLIC_BACKEND_URL=${BACKEND_URL}/api/v1
      - NEXT_PUBLIC_API_KEY=${FRONTEND_API_KEY}
      - NEXT_PUBLIC_FRONTEND_URL=${FRONTEND_EXTERNAL_URL}
      - NEXT_PUBLIC_BACKEND_EXTERNAL_URL=${BACKEND_EXTERNAL_URL}
      - WATCHPACK_POLLING=${WATCHPACK_POLLING}
      - CHOKIDAR_USEPOLLING=${CHOKIDAR_USEPOLLING}
      - NODE_ENV=${NODE_ENV}
      - PORT=${FRONTEND_PORT}
      - HOST=${FRONTEND_HOST}
    ports:
      - "${FRONTEND_EXTERNAL_PORT}:${FRONTEND_PORT}"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - ${DOCKER_NETWORK_NAME}
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:${FRONTEND_PORT}/"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data_dev:
    driver: local

networks:
  ${DOCKER_NETWORK_NAME}:
    driver: bridge
    ipam:
      config:
        - subnet: ${DOCKER_SUBNET}
